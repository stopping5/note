## @controller 

控制器（注入服务），用于标注控制层，相当于struts中的action层

## @service

服务（注入dao，用于标注服务层，主要用来进行业务的逻辑处理

## @repository

（实现dao访问）用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件

## @component

（把普通pojo实例化到spring容器中，相当于配置文件中的<bean id="" class=""/>）

<context:component-scan base-package=”com.mmnc”> 

## @RestController

@Target(ElementType.TYPE)

@Retention(RetentionPolicy.RUNTIME)

@Documented

@Controller

@ResponseBody //按body返回数据

> 注意：RestController 和 Controller的区域
>
> @Controller 如果我们返回的是String 其行为是跳转user.htmly页面 而不是返回数据
>
> @RestController 注解包含了原来的 @Controller 和 @ResponseBody 注解，使用过 
>
> Spring 的朋友对 @Controller 注解已经非常了解了，这里不再赘述， @ResponseBody 注解是将返回的数据结构转换为 Json 格式。所以 @RestController 可以看作是 @Controller 和 @ResponseBody 的结合体，相当于偷个懒，我们使用 @RestController 之后就不用再使用 
>
> @Controller 了。但是需要注意一个问题：如果是前后端分离，不用模板渲染的话，比如 Thymeleaf，这种情况下是可以直接使用 @RestController 将数据以 json 格式传给前端，前端拿到之 后解析；但如果不是前后端分离，需要使用模板来渲染的话，一般 Controller 中都会返回到具体的页 面，那么此时就不能使用 @RestController 了.

## @ReuqestMapping

地址映射的注解，可以注解在类或者函数上。在SpringMVC中在扫描带有@controller注解的时候会扫描到带有@RequestMapping的注解然后将该注解的方法





















































